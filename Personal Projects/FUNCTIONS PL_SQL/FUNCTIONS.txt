-- FUNCTION NVL E NVL2

NVL: SUBISTITUI VALORES NULOS PELO 
PARÂMETRO COLOCADO NA CHAMADA DA FUNÇÃO. 
EX:
NVL(COLUNA, 0) (USAR PARM. DO MSM DATATYPE).

NVL2: SE O CAMPO ESTIVER PREENCHIDO, ELE
TROCA PELO PRIMEIRO PARÂMETRO, SE ESTIVER 
VAZIO, TROCA PELO SEGUNDO PARÂMETRO.
EX:
NVL2(NOME_COLUNA,'1°VALOR','2°VALOR'). 


-- DISTINCT UNIFICA VALORES MULTIPLOS A 
SEREM MOSTRADOS EM UMA QUERY(SELECT).


-- FUNCTION DECODE

DECODE: FUNCIONA BASICAMENTE COMO UMA
ESTRUTURA DE DECISÃO, REALIZANDO OPERAÇÕES
COM BASE EM PARÂMETROS PASSADOS.
PRECISA DE 3 PARÂMETROS NO MÍNIMO. 
SE O 1° PAR. FOR TRUE NO 2° PAR., ENTÃO SERA 
EFETIVADO O 3° PARÂMETRO (EX: UMA OPERAÇÃO
ARITIMÉTICA).
UM 4° OU MAIS PARÂMETROS IRÁ FUNCIONAR COMO 
"ELSE", OU SEJA, SE O PRIMEIRO E O SEGUNDO 
FOREM FALSOS.
EX: 
SELECT  FIRST_NAME, 
	SALARY,
	DECODE (JOB_ID,'IT_PROG', 
		SALARY * 1.2, 
		SALARY * 1.1) AS AUMENTO_SAL
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100
OR JOB_ID = 'IT_PROG';
 
SELECT  
FIRST_NAME, 
SALARY,
DECODE (JOB_ID,'IT_PROG', SALARY * 1.2,
	       'AD_PRES', SALARY * 1.3) 
		AS AUMENTO_SAL
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100
OR JOB_ID IN ('IT_PROG', 'AD_VP);


-- FUNCTION FLOOR 

FLOOR: TRANSFORMA NÚMERO DECIMAL EM INT.
RETIRANDO TODA PARTE DECIMAL DEIXANDO APENAS
A PARTE INTEIRA. COM VALORES NEGATIVOS ELA VAI
RETORNAR O VALOR MAIS BAIXO AINDA POR REGRA
MATEMÁTICA.
EX:
SELECT FLOOR(TO_NUMBER(3.5))
FROM DUAL;   RESULT = 3.

SELECT FLOOR(TO_NUMBER(-3.5))
FROM DUAL;   RESULT = -4.



-- FUNCTION MOD

MOD: RETORNA O RESTO DA DIVISÃO INTEIRA DE 
2 NÚMEROS. UTILIZA COMO BASE A FUNCTION FLOOR.
EX: 
SALARY := 9000
MOD(SALARY, 5000) = 4000
9000/5000 -> 9/5 -> 1,8 -> 
(5 X 1.8) - (5 X 0,8) = 5 (5000), RESTO -> 4 (4000)
ENTÃO:
MOD = (1°PAR. - (2°PAR. * FLOOR(1°PAR./2°PAR.)))



-- FUNCTION SUBSTR

SUBSTR: SUBSTRING -> CORTA UMA STRING DA FOMRA QUE
FOR DEFINIDA NOS PARÂMETROS. COM NÚMERO POSITIVO
CONTA A POSIÇÃO DA STRING DO COMEÇO P/ FINAL. COM
NÚMERO NEGATIVO CONTA DO FINAL P/ O COMEÇO.
EX:
SUBSTR(NOME_COLUNA, 4) -> MOSTRA A STRING A PARTIR
DA 4° POSITION -> ESQUERDA P/ DIREITA.

SUBSTR(NOME_COLUNA, -9) -> MOSTRA A STRING A PARTIR
DA 9° POSITION, CONTANDO DO FIM PARA O COMEÇO.
DIREITA P/ ESQUERDA.


-- INSTR 

INSTR: TRANSFORMA POSIÇÕES DE STRINGS EM NÚMEROS
INTEIROS, PODE SER USADO COM SUBSTR. 
INSTR2: 1° NÃO PODE SER CLOB OU NCLOB.

REGEXP_INSTR('TXTMSSG', 'A', 1, 1, 0, 'I')
REGEXP_INSTR('TXTMSSG'(OBJETO DE ANÁLISE,
'A'(RETORNO), 1(INÍCIO CONTAGEM), 
1(QUANTIDADE DESEJADA DE RETORNO), 
0 OU 1(POSIÇÃO REAL OU PRÓXIMA),
 'C' OU 'I'(CASE SENSITIVE OU INSENSITIVE))

USAR 'OR' COM PIPE:
REGEXP_INSTR('TXTMSSG', 'A|E|I|O|U', 1, 1, 0, 'I')
DEFINIÇÃO DE VARIOS PARÂMETROS NA PRIMEIRA POSIÇÃO.



-- LAST DAY

LAST DAY: RETORNA O ÚLTIMO DIA DO MÊS DE QUALQUER
MÊS. O MÊS QUE UM FUNC FOI CONTRATADO POR EXEMPLO.
EX:
LAST_DAY(TRUNC('12/02/2021', 'DD/MM/YY'))
RETURN: 28/02/2021 (ÚLTIMO DIA DO MÊS)


-- ADD MONTHS

ADD MONTHS: ADICIONA UM VALOR DEFINIDO DE MESES À
DATA ESPECIFICADA EM PARÂMETRO.
EX:
ADD_MONTHS(TO_DATE('12/02/2021', 'DD/MM/YY'),1)
RETURN: 12/03/2021


-- TRIM 

LTRIM: RETIRA CARACTERES DE UM TEXT DA ESQ. P DIR.
RTRIM: RETIRA CARACTERES DE UM TEXT DA DIR. P ESQ.
TRIM: RETIRA CARACTERES DE UM TEXT DA FORMA QUE FOR
DEFINIDA EM PARÂMETROS, POR PADRÃO ELE TIRA TODOS 
OSCARACTERES DE ESPAÇO EM VOLTA DO TEXTO.
EX ltrim e rtrim:
SELECT ltrim('   TESTE   ') FROM dual: VAI TIRAR OS
ESPAÇOS DA ESQUERDA, OU QUALQUER CARACTERE COLOCADO
EM UM 2° PARÂMETRO. RETURN: 'TESTE   '

SELECT rtrim('   TESTE   ') FROM dual: RETIRA OS
ESPAÇOS DA DIREITA, OU QUALQUER CARACTERE COLOCADO
EM UM 2° PARÂMETRO. RETURN: '   TESTE'

EX trim: O TRIM PODE SER USADO DE 4 FORMAS;
1°:
SELECT trim('   teste   ') FROM dual: RETIRA TODOS
OS ESPAÇOS POR PADRÃO. RETURN: 'teste'

2°
SELECT trim(both 'X' from 'XXXtesteXXX') FROM dual: 
SEMELHANTE AO PRIMEIRO, PORÉM DEFININDO O PRIMEIRO
PARÂMETRO E USANDO 'both' E 'from' COMO SINTAXE.
(both É OPCIONAL). RETURN: 'teste'

3°
SELECT trim(leading '0' from '0001230') FROM dual:
RETIRA CARACTERES MENSIONADOS NO 1° PAR. DA ESQ. 
PARA A DIR.. RETURN: '1230'

4°
SELECT trim(trailing 'x' from 'testexx') FROM dual:
RETIRA CARACTERES MENSIONADOS NO 1° PAR. DA DIR. 
PARA A ESQ.. RETURN: 'teste'



-- ROUND

ROUND: ARREDONDA NÚMEROS PARA MAIS A PARTIR 
DE 5 E MATÉM O VALOR ATÉ 4. PODE FUNCIONAR COM DATAS, A PARTIR DA METADE DO PARÂMETRO ESTIPULADO.
EX NUM:
SELECT salary / 2.7,
	(round(salary / 2.7, 2*casasDecimais*)
	as ROUND
FROM employees
WHERE job_id = 'IT_PROG'; 
RETURN: 333.3333333 | 3333.33
1346.5788888 | 1346.58

EX DATE: SELECT round(SYSDATE, 'DAY' -- ARREDONDA PARA O PRÓXIMO DOMINGO OU ANTERIOR DA SEMANA
			    OU 'MONTH' -- ARREDONDA PARA O COMEÇO DO MÊS ATUAL OU DO PRÓXIMO
			    OU 'YYYY') -- ARREDONDA PARA O COMEÇO DO ANO ATUAL OU DO PRÓXIMO
	 FROM dual;



-- TRUNC

TRUNC: TRUNCA VALORES SEMPRE ARREDONDANDO PRA BAIXO OU MANTENDO A QUANTIDADE 
DEFINIDA DE DECIMAIS, NÃO IMPORTANDO SE O VALOR DECIMAL ANTERIOR É 1 OU 9.
EX: 
SELECT trunc(500.9999) FROM dual; RETURN: 500
SELECT trunc(500.9999, 2) FROM dual; RETURN: 500.99 -- COLOANDO 2° PAR. PARA CASAS DECIMAIS.


-- LOWER, UPPER E INITCAP

LOWER: TRANSFORMA TODOS OS CARACTERES DE UM TXT 
EM letras minúsculas.

UPPER: transforma todos os caracteres de um txt
em LETRAS MAIÚSCULAS.

INITCAP: Transforma Todas As Letras Iniciais De
Um Txt Em Maiúsculas, A Partir Dos Espaços. 



-- MONTHS BETWEEN

MONTHS BETWEEN: MOSTRA A DIFERENÇA DE MESES E DIAS, 
ENTRE DUAS DATAS, EM FORMATO NUMBER. PODENDO SER 
FORMATADO DEPOIS PARA CHEGAR AO NÚMERO DE DIAS TAMBÉM.



-- NEXT DAY 

NEXT DAY: CONSEGUE MOSTRAR A PRÓXIMA OCORRÊNCIA
DE UMA DIA DA SEMANA ESTIPULADO EM PARÂMETRO.
EX: 
SELECT NEXT_DAY(TO_DATE('01/07/2021','DD/MM/YYYY'), 'SUNDAY' OU 'SUN') -- SISTEMAS EM INGLES
FROM DUAL;  RETURN: 04/07/2021



-- CASE 

CASE: ESTRUTURA DE DECISÃO JA CONHECIDA EM CENÁRIOS
DE PROGRAMAÇÃO, QUE TRAZ POSSIBILIDADE DE ALTERAÇÃO
DE VALORES NA QUERY, LEVANDO EM CONTA PARÂMETROS
DEFINIDOS NA ESTRUTURA. DIFERENTE DO 'DECODE' ELE
PODE SER USADO COM 'AND' E 'OR', ALÉM DOS SINAIS
LÓGICOS ' >, <, >=, <=, = e != <>).
EX:
SELECT FIRST_NAME, SALARY,
CASE 
   WHEN SALARY < 1000 THEN SALARY * 1.2
   WHEN SALARY >= 1000 AND SALARY <= 3000 THEN SALARY * 1.1
   ELSE SALARY * 1.05
END AS NEW_SALARY
FROM EMPLOYEES;



-- LPAD E RPAD

LPAD: DEFINE UM TAMANHO EXATO PARA UM CERTO CAMPO
PODENDO SER ADICIONADO ALGUM CARACTERE DESEJADO.
NO CASO O L PAD FAZ ISSO NO LADO ESQUERDO.
RPAD: FAZ NO LADO DIREITO.
PODE SERVIR PARAINTEGRAÇÃO COM OUTROS SISTEMAS E
AJUDA NO ENVIO OU RECEBIMENTO DE DADOS QUE PRECISAM
ESTAR COM UM TAMANHO FIXO.
RECEBE ATÉ 3 PARÂMETROS, 2 OBRIGATÓRIOS.
EX:
SELECT FIRST_NAME, LPAD(FIRST_NAME, 12, '*') 
FROM EMPLOYEES; RETURN ('*******TESTE')



-- PIVOT 

PIVOT: FUNCTION PARA MOSTRAR UM SELECT ORGANIZADO
DE FORMA DIFERENTE, UTILIZANDO OS CAMPOS DE ALGUMA
TABELA COMO CAMPOS DA QUERY TAMBEM. 
EXISTE A FUNÇÃO PARA DESFAZER O PIVOT: UNPIVOT.
EX:
SELECT * FROM
 (SELECT manager_id, department_id, employee_id
  FROM employees
 )
PIVOT
 (COUNT(employee_id)
  FOR department_id IN (10,20,30,50,60,80,90)
 )
ORDER BY manager_id;



-- TO_CHAR

TO CHAR: FORMATA UM CAMPO DA FORMA COM QUE FOR 
DEFINIDA EM 'MÁSCARAS', QUE SÃO AS REFERÊCIAS DE 
FORMATAÇÃO. PODENDO COMPLETAR ESPAÇOS TAMBÉM.
EX:
SELECT to_char(1210.73, '9999.9') 
FROM DUAL; RETURN: 1210.7

SELECT to_char(1210.73, '$9,999.9') 
FROM DUAL; RETURN: $1,210.7

SELECT to_char(12, '000099') 
FROM DUAL; RETURN: 000012



-- TO_DATE

TO DATE: TRANSFORMA DADOS NUMÉRICOS EM DADOS DO TIPO
DATE PARA PODER SER USADO EM CAMPOS DESSE TIPO.
PORÉM USA A FORMATAÇÃO PRINCIPAL PARA NA CONVERSÃO
** EX: NLS_DATA_FORMAT = MM/DD/YYYY HH:MI
ENTÃO SUA MARCARA TEM QUE SER ASSIM TBM PARA PODER
CONVERTER SEUS VALORES QUE AINDA SÃO NUMÉRICOS.


MÁSCARAS: 
YYYYMMDD
RRRR -> ANOS 1950 Á 2049 >__ NO CASO DE ANO COM 2 DÍGITOS
YYYY -> ANOS 2000 Á 2*** >

HH24:MM:SS
HH OU HH24: 12 OU 24 HORAS

EX: NLS_DATA_FORMAT = DD/MM/YYYY

SELECT TO_DATE('990928', 'YYMMDD') -- REPARE QUE O ANO SO TEM 2 DÍG. 
FROM DUAL; RETURN: 28/09/2099 -- PORQUE USOU MÁSCARA Y E NÃO R



-- LEAD LAG

LAG: FUNCTION ANALÍTICA QUE USA O ORDER BY PARA 
FUNCIONAR, E RETORNA JUNTO AO VALOR ORDENADO, UM
CAMPO A MAIS COM O VALOR ANTERIOR AOATUAL NO CURSOR.   
LEAD: FUNCIONA DA MESMA FORMA POREM EXIBINDO O 
PRÓXIMO VALOR.
EX:
SELECT first_name,hire_date, 
LAG(hire_date) OVER (order by hire_date desc) DATE_ANTERIOR
FROM employees
WHERE manager_id = 100;



-- DENSE_RANK

DENSE_RANK: ESTIPULA UM RANK DE VALORES JUNTAMENTE
A OUTROS PARÂMETROS DE ANÁLISE NUMA QUERY, E TRAZ
AS POSIÇÕES DE CADA UM EM UM "RANK HIPOTÉTICO".
EX:
SELECT hire_date,
  department_id AS DPTO,
  job_id,
  salary,
  LAG(salary)
  OVER(PARTITION BY dpartment_id ORDER BY salary) salary_ant
  DENSE_RANK()
  OVER(PARTITION BY dpartment_id ORDER BY salary) DENSE_RANK
FROM EMPLOYEES
WHERE MANAGER_ID = 100;



-- STDDEV

STDDEV: CALCULA A MÉDIA DE DESVIO PADRÃO SOBRE UMA
CERTA COLUNA, OU SEJA, UM CERTO VALOR DENTRO DE UMA
TABELA. DESVIO PADRÃO É  CALCULADO EM CIMA DA MÉDIA
GERAL DO VALOR EM QUESTÃO, PESQUISE MAIS SOBRE ISSO.
EX:
SELECT DEPARTMENT_ID AS DPTO,
	HIRE_DATE,
	LAST_NAME,
	SALARY,
	STDDEV(SALARY) OVER (ORDER BY HIRE_DATE) AS STDDEV
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (60);



-- COUNT, AVG, SUM

COUNT: CONTA OS REGISTROS DO PARÂMETRO MENSIONADO
E TRAZ A QUANTIDADE DE LINHAS.
AVG: MÉDIA DE VALORES ESPECIFICADOS EM PARÂMETROS
SUM: SOMA TODOS OS VALORES DE UM PARÂMETRO MENSIONADO
EX:
SELECT MANAGER_ID, COUNT(1), -- VAI CONTAR AS LINHAS RETORNADAS NA QUERY
	SUM(SALARY),
	AVG(SALARY)
FROM EMPLOYEES
GROUP BY MANAGER_ID;



-- MIN, MAX, MEDIAN E STATS_MODE

MIN: CALCULA O VALOR MÍNIMO DE UM CAMPO
MAX: CALCULA O VALOR MÁXIMO DE UM CAMPO
MEDIAN: CALACULA A MÉDIA MEDIANA DE UM CAMPO. 
LISTA OS VALORE DE FORMA CRESCENTE OU DECRESCENTE E
TOMA O VALOR CENTRAL COMO MEDIANA.
STATS_MODE: TRAZ O VALOR COM MAIOR OCORRÊNCIA EM UM 
CAMPO MENSIONADO.
EX:
SELECT  MIN(SALARY),
	MAX(SALARY),
	AVG(SALARY),
	MEDIAN(SALARY),
	STATS_MODE(SALARY)
FROM EMPLOYEES
GROUP BY MANAGER_ID;



	